{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1","program":"C:\\Users\\Kiss Martno\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","priority_queue","--edition=2018","C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a0d74fe03d6b8f27","-C","extra-filename=-a0d74fe03d6b8f27","--out-dir","c:\\DEV\\aoc-2021-rust\\day15\\target\\rls\\debug\\deps","-L","dependency=c:\\DEV\\aoc-2021-rust\\day15\\target\\rls\\debug\\deps","--extern","indexmap=c:\\DEV\\aoc-2021-rust\\day15\\target\\rls\\debug\\deps\\libindexmap-9cd8eb8be1204225.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","C:\\Users\\Kiss Martno\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\DEV\\aoc-2021-rust\\day15\\target\\rls\\debug\\deps\\libpriority_queue-a0d74fe03d6b8f27.rmeta"},"prelude":{"crate_id":{"name":"priority_queue","disambiguator":[15003190740394139632,0]},"crate_root":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src","external_crates":[{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","num":14,"id":{"name":"indexmap","disambiguator":[13272181983161583861,0]}},{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","num":15,"id":{"name":"hashbrown","disambiguator":[14711156702242172247,0]}}],"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":832,"byte_end":2877,"line_start":21,"line_end":90,"column_start":1,"column_end":46}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2811,"byte_end":2830,"line_start":89,"line_end":89,"column_start":39,"column_end":58},"alias_span":null,"name":"DoublePriorityQueue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2863,"byte_end":2876,"line_start":90,"line_end":90,"column_start":32,"column_end":45},"alias_span":null,"name":"PriorityQueue","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":832,"byte_end":2877,"line_start":21,"line_end":90,"column_start":1,"column_end":46},"name":"","qualname":"::","value":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":27},{"krate":0,"index":323},{"krate":0,"index":577},{"krate":0,"index":735},{"krate":0,"index":738}],"decl_id":null,"docs":" This crate provides 2 main data structures:\n  *  a [priority queue](PriorityQueue)\n  *  a [double prioriy queue](DoublePriorityQueue).","sig":null,"attributes":[{"value":"/ This crate provides 2 main data structures:","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":832,"byte_end":879,"line_start":21,"line_end":21,"column_start":1,"column_end":48}},{"value":"/  *  a [priority queue](PriorityQueue)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":880,"byte_end":921,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/  *  a [double prioriy queue](DoublePriorityQueue).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":922,"byte_end":976,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":977,"byte_end":980,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Both data structures are backed by an hashmap, allowing","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":981,"byte_end":1040,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ to change the priority of an element with some efficient methods in","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1041,"byte_end":1112,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ **O(log(N))** time (worst case).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1113,"byte_end":1149,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1150,"byte_end":1153,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The elements (called `Item`s, of type `I`) must implement","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1154,"byte_end":1215,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/ [`Hash`](https://doc.rust-lang.org/std/hash/trait.Hash.html)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1216,"byte_end":1280,"line_start":30,"line_end":30,"column_start":1,"column_end":65}},{"value":"/ and [`Eq`](https://doc.rust-lang.org/std/cmp/trait.Eq.html) traits.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1281,"byte_end":1352,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1353,"byte_end":1356,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1357,"byte_end":1435,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following property holds:","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1436,"byte_end":1523,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1524,"byte_end":1527,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1528,"byte_end":1539,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1540,"byte_end":1576,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1577,"byte_end":1584,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1585,"byte_end":1588,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1589,"byte_end":1659,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1660,"byte_end":1663,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The priority `P` may be any type that implements","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1664,"byte_end":1716,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ [`Ord`](https://doc.rust-lang.org/std/cmp/trait.Ord.html).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1717,"byte_end":1779,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ For reverse order remember the standard wrapper","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1780,"byte_end":1831,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/ [`Reverse<T>`](https://doc.rust-lang.org/std/cmp/struct.Reverse.html)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1832,"byte_end":1905,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1906,"byte_end":1909,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1910,"byte_end":1923,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1924,"byte_end":1935,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/ use priority_queue::PriorityQueue;","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1936,"byte_end":1974,"line_start":49,"line_end":49,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1975,"byte_end":1978,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ let mut pq = PriorityQueue::new();","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":1979,"byte_end":2017,"line_start":51,"line_end":51,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2018,"byte_end":2021,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ assert!(pq.is_empty());","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2022,"byte_end":2049,"line_start":53,"line_end":53,"column_start":1,"column_end":28}},{"value":"/ pq.push(\"Apples\", 5);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2050,"byte_end":2075,"line_start":54,"line_end":54,"column_start":1,"column_end":26}},{"value":"/ pq.push(\"Bananas\", 8);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2076,"byte_end":2102,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/ pq.push(\"Strawberries\", 23);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2103,"byte_end":2135,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2136,"byte_end":2139,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pq.peek(), Some((&\"Strawberries\", &23)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2140,"byte_end":2196,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2197,"byte_end":2200,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ pq.change_priority(\"Bananas\", 25);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2201,"byte_end":2239,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(pq.peek(), Some((&\"Bananas\", &25)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2240,"byte_end":2291,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2292,"byte_end":2295,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ for (item, _) in pq.into_sorted_iter() {","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2296,"byte_end":2340,"line_start":63,"line_end":63,"column_start":1,"column_end":45}},{"value":"/     println!(\"{}\", item);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2341,"byte_end":2370,"line_start":64,"line_end":64,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2371,"byte_end":2376,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2377,"byte_end":2384,"line_start":66,"line_end":66,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core_iterators","qualname":"::core_iterators","value":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":22}],"decl_id":null,"docs":" This module defines iterator types that are used with\n both the [`PriorityQueue`](super::PriorityQueue) and the [`DoublePriorityQueue`](super::DoublePriorityQueue)","sig":null,"attributes":[{"value":"/ This module defines iterator types that are used with","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":3693,"byte_end":3750,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/ both the [`PriorityQueue`](super::PriorityQueue) and the [`DoublePriorityQueue`](super::DoublePriorityQueue)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":3751,"byte_end":3863,"line_start":21,"line_end":21,"column_start":1,"column_end":113}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":3864,"byte_end":3867,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Usually you don't need to explicitly `use` any of the types declared here.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":3868,"byte_end":3946,"line_start":23,"line_end":23,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4343,"byte_end":4347,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"Iter","qualname":"::core_iterators::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":11}],"decl_id":null,"docs":" An iterator in arbitrary order over the couples\n `(item, priority)` in the queue.","sig":null,"attributes":[{"value":"/ An iterator in arbitrary order over the couples","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4189,"byte_end":4240,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ `(item, priority)` in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4241,"byte_end":4277,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4278,"byte_end":4281,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ It can be obtained calling the `iter` method.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4282,"byte_end":4331,"line_start":42,"line_end":42,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4867,"byte_end":4875,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::core_iterators::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":" An iterator in arbitrary order over the couples\n `(item, priority)` that consumes the queue.","sig":null,"attributes":[{"value":"/ An iterator in arbitrary order over the couples","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4667,"byte_end":4718,"line_start":62,"line_end":62,"column_start":1,"column_end":52}},{"value":"/ `(item, priority)` that consumes the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4719,"byte_end":4766,"line_start":63,"line_end":63,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4767,"byte_end":4770,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ It can be obtained calling the `into_iter` method from the `IntoIterator` trait.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4771,"byte_end":4855,"line_start":65,"line_end":65,"column_start":1,"column_end":85}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"double_priority_queue","qualname":"::double_priority_queue","value":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":741},{"krate":0,"index":746},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":147},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":165},{"krate":0,"index":191},{"krate":0,"index":219},{"krate":0,"index":223},{"krate":0,"index":248},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":261},{"krate":0,"index":267},{"krate":0,"index":274},{"krate":0,"index":282},{"krate":0,"index":290},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":322}],"decl_id":null,"docs":" This module contains the [`DoublePriorityQueue`] type and the related iterators.","sig":null,"attributes":[{"value":"/ This module contains the [`DoublePriorityQueue`] type and the related iterators.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":5969,"byte_end":6053,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6054,"byte_end":6057,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See the type level documentation for more details and examples.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6058,"byte_end":6125,"line_start":22,"line_end":22,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iterators","qualname":"::double_priority_queue::iterators","value":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":53},{"krate":0,"index":59},{"krate":0,"index":69},{"krate":0,"index":75},{"krate":0,"index":80},{"krate":0,"index":86}],"decl_id":null,"docs":" This module defines iterator types that are used only with the [`DoublePriorityQueue`]","sig":null,"attributes":[{"value":"/ This module defines iterator types that are used only with the [`DoublePriorityQueue`]","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":38708,"byte_end":38798,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":38799,"byte_end":38802,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Usually you don't need to explicitly `use` any of the types declared here.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":38803,"byte_end":38881,"line_start":22,"line_end":22,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39774,"byte_end":39781,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::double_priority_queue::iterators::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" A mutable iterator over the couples `(item, priority)` of the `DoublePriorityQueue`\n in arbitrary order.","sig":null,"attributes":[{"value":"/ A mutable iterator over the couples `(item, priority)` of the `DoublePriorityQueue`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39261,"byte_end":39348,"line_start":44,"line_end":44,"column_start":1,"column_end":88}},{"value":"/ in arbitrary order.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39349,"byte_end":39372,"line_start":45,"line_end":45,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39373,"byte_end":39376,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ It can be obtained calling the `iter_mut` method.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39377,"byte_end":39430,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39431,"byte_end":39434,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ It can be used to update the priorities of the elements in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39435,"byte_end":39508,"line_start":49,"line_end":49,"column_start":1,"column_end":74}},{"value":"/ When the iterator goes out of scope, the heap is rebuilt to restore the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39509,"byte_end":39584,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ structural properties.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39585,"byte_end":39611,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39612,"byte_end":39615,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The item is mutable too, but it is a logical error to modify it in a way that","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39616,"byte_end":39697,"line_start":53,"line_end":53,"column_start":1,"column_end":82}},{"value":"/ changes the result of any of `hash` or `eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39698,"byte_end":39746,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":39747,"byte_end":39762,"line_start":55,"line_end":55,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41438,"byte_end":41452,"line_start":123,"line_end":123,"column_start":12,"column_end":26},"name":"IntoSortedIter","qualname":"::double_priority_queue::iterators::IntoSortedIter","value":"IntoSortedIter {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" A consuming iterator over the couples `(item, priority)` of the `PriorityQueue`\n ordered by priority, from the lowest to the highest.","sig":null,"attributes":[{"value":"/ A consuming iterator over the couples `(item, priority)` of the `PriorityQueue`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40974,"byte_end":41057,"line_start":114,"line_end":114,"column_start":1,"column_end":84}},{"value":"/ ordered by priority, from the lowest to the highest.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41058,"byte_end":41114,"line_start":115,"line_end":115,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41115,"byte_end":41118,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ It can be obtained calling the `into_sorted_iter` method.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41119,"byte_end":41180,"line_start":117,"line_end":117,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41181,"byte_end":41184,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ Since it implements [`DoubleEndedIterator`], this iterator can be reversed at any time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41185,"byte_end":41275,"line_start":119,"line_end":119,"column_start":1,"column_end":91}},{"value":"/ calling `rev`, at which point, elements will be extracted from the one with maximum priority","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41276,"byte_end":41372,"line_start":120,"line_end":120,"column_start":1,"column_end":97}},{"value":"/ to the one with minimum priority.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41373,"byte_end":41410,"line_start":121,"line_end":121,"column_start":1,"column_end":38}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41411,"byte_end":41426,"line_start":122,"line_end":122,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7824,"byte_end":7843,"line_start":83,"line_end":83,"column_start":12,"column_end":31},"name":"DoublePriorityQueue","qualname":"::double_priority_queue::DoublePriorityQueue","value":"DoublePriorityQueue {  }","parent":null,"children":[{"krate":0,"index":745}],"decl_id":null,"docs":" A double priority queue with efficient change function to change the priority of an\n element.","sig":null,"attributes":[{"value":"/ A double priority queue with efficient change function to change the priority of an","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6511,"byte_end":6598,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/ element.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6599,"byte_end":6611,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6612,"byte_end":6615,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The priority is of type P, that must implement `std::cmp::Ord`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6616,"byte_end":6683,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6684,"byte_end":6687,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The item is of type I, that must implement `Hash` and `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6688,"byte_end":6751,"line_start":46,"line_end":46,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6752,"byte_end":6755,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Implemented as a heap of indexes, stores the items inside an `IndexMap`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6756,"byte_end":6831,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ to be able to retrieve them quickly.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6832,"byte_end":6872,"line_start":49,"line_end":49,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6873,"byte_end":6876,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ With this data structure it is possible to efficiently extract both","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6877,"byte_end":6948,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/ the maximum and minimum elements arbitrarily.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6949,"byte_end":6998,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6999,"byte_end":7002,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ If your need is to always extract the minimum, use a","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7003,"byte_end":7059,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ `PriorityQueue<I, Reverse<P>>` wrapping","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7060,"byte_end":7103,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/ your priorities in the standard wrapper","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7104,"byte_end":7147,"line_start":56,"line_end":56,"column_start":1,"column_end":44}},{"value":"/ [`Reverse<T>`](https://doc.rust-lang.org/std/cmp/struct.Reverse.html).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7148,"byte_end":7222,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7223,"byte_end":7226,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7227,"byte_end":7230,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7231,"byte_end":7244,"line_start":60,"line_end":60,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7245,"byte_end":7256,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/ use priority_queue::DoublePriorityQueue;","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7257,"byte_end":7301,"line_start":62,"line_end":62,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7302,"byte_end":7305,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let mut pq = DoublePriorityQueue::new();","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7306,"byte_end":7350,"line_start":64,"line_end":64,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7351,"byte_end":7354,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ assert!(pq.is_empty());","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7355,"byte_end":7382,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/ pq.push(\"Apples\", 5);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7383,"byte_end":7408,"line_start":67,"line_end":67,"column_start":1,"column_end":26}},{"value":"/ pq.push(\"Bananas\", 8);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7409,"byte_end":7435,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/ pq.push(\"Strawberries\", 23);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7436,"byte_end":7468,"line_start":69,"line_end":69,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7469,"byte_end":7472,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pq.peek_max(), Some((&\"Strawberries\", &23)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7473,"byte_end":7533,"line_start":71,"line_end":71,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(pq.peek_min(), Some((&\"Apples\", &5)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7534,"byte_end":7587,"line_start":72,"line_end":72,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7588,"byte_end":7591,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ pq.change_priority(\"Bananas\", 25);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7592,"byte_end":7630,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(pq.peek_max(), Some((&\"Bananas\", &25)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7631,"byte_end":7686,"line_start":75,"line_end":75,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7687,"byte_end":7690,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ for (item, _) in pq.into_sorted_iter() {","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7691,"byte_end":7735,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"/     println!(\"{}\", item);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7736,"byte_end":7765,"line_start":78,"line_end":78,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7766,"byte_end":7771,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7772,"byte_end":7779,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":7797,"byte_end":7812,"line_start":82,"line_end":82,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8639,"byte_end":8642,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<DoublePriorityQueue<I, P>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `DoublePriorityQueue`\n","sig":null,"attributes":[{"value":"/ Creates an empty `DoublePriorityQueue`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8585,"byte_end":8627,"line_start":127,"line_end":127,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8780,"byte_end":8793,"line_start":133,"line_end":133,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<DoublePriorityQueue<I, P>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `DoublePriorityQueue` with the specified capacity.\n","sig":null,"attributes":[{"value":"/ Creates an empty `DoublePriorityQueue` with the specified capacity.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8697,"byte_end":8768,"line_start":132,"line_end":132,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9080,"byte_end":9099,"line_start":145,"line_end":145,"column_start":12,"column_end":31},"name":"with_default_hasher","qualname":"<DoublePriorityQueue<I, P, H>>::with_default_hasher","value":"pub fn with_default_hasher() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `DoublePriorityQueue` with the default hasher\n","sig":null,"attributes":[{"value":"/ Creates an empty `DoublePriorityQueue` with the default hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9002,"byte_end":9068,"line_start":144,"line_end":144,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9274,"byte_end":9306,"line_start":150,"line_end":150,"column_start":12,"column_end":44},"name":"with_capacity_and_default_hasher","qualname":"<DoublePriorityQueue<I, P, H>>::with_capacity_and_default_hasher","value":"pub fn with_capacity_and_default_hasher(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `DoublePriorityQueue` with the specified capacity and default hasher\n","sig":null,"attributes":[{"value":"/ Creates an empty `DoublePriorityQueue` with the specified capacity and default hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9173,"byte_end":9262,"line_start":149,"line_end":149,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9591,"byte_end":9602,"line_start":162,"line_end":162,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<DoublePriorityQueue<I, P, H>>::with_hasher","value":"pub fn with_hasher(H) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `DoublePriorityQueue` with the specified hasher\n","sig":null,"attributes":[{"value":"/ Creates an empty `DoublePriorityQueue` with the specified hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9511,"byte_end":9579,"line_start":161,"line_end":161,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9968,"byte_end":9992,"line_start":171,"line_end":171,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<DoublePriorityQueue<I, P, H>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, H) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `DoublePriorityQueue` with the specified capacity and hasher","sig":null,"attributes":[{"value":"/ Creates an empty `DoublePriorityQueue` with the specified capacity and hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9697,"byte_end":9778,"line_start":166,"line_end":166,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9783,"byte_end":9786,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ The internal collections will be able to hold at least `capacity`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9791,"byte_end":9860,"line_start":168,"line_end":168,"column_start":5,"column_end":74}},{"value":"/ elements without reallocating.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9865,"byte_end":9899,"line_start":169,"line_end":169,"column_start":5,"column_end":39}},{"value":"/ If `capacity` is 0, there will be no allocation.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9904,"byte_end":9956,"line_start":170,"line_end":170,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10259,"byte_end":10263,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"iter","qualname":"<DoublePriorityQueue<I, P, H>>::iter","value":"pub fn iter(&Self) -> Iter<, I, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator in arbitrary order over the\n (item, priority) elements in the queue\n","sig":null,"attributes":[{"value":"/ Returns an iterator in arbitrary order over the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10149,"byte_end":10200,"line_start":177,"line_end":177,"column_start":5,"column_end":56}},{"value":"/ (item, priority) elements in the queue","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10205,"byte_end":10247,"line_start":178,"line_end":178,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10998,"byte_end":11006,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<DoublePriorityQueue<I, P, H>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, I, P, H>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator in arbitrary order over the\n (item, priority) elements in the queue.","sig":null,"attributes":[{"value":"/ Return an iterator in arbitrary order over the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10407,"byte_end":10457,"line_start":189,"line_end":189,"column_start":5,"column_end":55}},{"value":"/ (item, priority) elements in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10462,"byte_end":10505,"line_start":190,"line_end":190,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10510,"byte_end":10513,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The item and the priority are mutable references, but it's a logic error","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10518,"byte_end":10594,"line_start":192,"line_end":192,"column_start":5,"column_end":81}},{"value":"/ to modify the item in a way that change the result of `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10599,"byte_end":10672,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10677,"byte_end":10680,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ It's *not* an error, instead, to modify the priorities, because the heap","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10685,"byte_end":10761,"line_start":195,"line_end":195,"column_start":5,"column_end":81}},{"value":"/ will be rebuilt once the `IterMut` goes out of scope. It would be","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10766,"byte_end":10835,"line_start":196,"line_end":196,"column_start":5,"column_end":74}},{"value":"/ rebuilt even if no priority value would have been modified, but the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10840,"byte_end":10911,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/ procedure will not move anything, but just compare the priorities.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10916,"byte_end":10986,"line_start":198,"line_end":198,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11242,"byte_end":11250,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"peek_min","qualname":"<DoublePriorityQueue<I, P, H>>::peek_min","value":"pub fn peek_min(&Self) -> Option<(&I, &P)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the couple (item, priority) with the lowest\n priority in the queue, or None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the couple (item, priority) with the lowest","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11078,"byte_end":11133,"line_start":203,"line_end":203,"column_start":5,"column_end":60}},{"value":"/ priority in the queue, or None if it is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11138,"byte_end":11188,"line_start":204,"line_end":204,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11193,"byte_end":11196,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11201,"byte_end":11230,"line_start":206,"line_end":206,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11624,"byte_end":11632,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"peek_max","qualname":"<DoublePriorityQueue<I, P, H>>::peek_max","value":"pub fn peek_max(&Self) -> Option<(&I, &P)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the couple (item, priority) with the greatest\n priority in the queue, or None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the couple (item, priority) with the greatest","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11458,"byte_end":11515,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ priority in the queue, or None if it is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11520,"byte_end":11570,"line_start":216,"line_end":216,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11575,"byte_end":11578,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11583,"byte_end":11612,"line_start":218,"line_end":218,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12323,"byte_end":12335,"line_start":238,"line_end":238,"column_start":12,"column_end":24},"name":"peek_min_mut","qualname":"<DoublePriorityQueue<I, P, H>>::peek_min_mut","value":"pub fn peek_min_mut(&mut Self) -> Option<(&mut I, &P)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the couple (item, priority) with the greatest\n priority in the queue, or None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the couple (item, priority) with the greatest","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11840,"byte_end":11897,"line_start":227,"line_end":227,"column_start":5,"column_end":62}},{"value":"/ priority in the queue, or None if it is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11902,"byte_end":11952,"line_start":228,"line_end":228,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11957,"byte_end":11960,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The item is a mutable reference, but it's a logic error to modify it","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":11965,"byte_end":12037,"line_start":230,"line_end":230,"column_start":5,"column_end":77}},{"value":"/ in a way that change the result of  `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12042,"byte_end":12097,"line_start":231,"line_end":231,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12102,"byte_end":12105,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The priority cannot be modified with a call to this function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12110,"byte_end":12175,"line_start":233,"line_end":233,"column_start":5,"column_end":70}},{"value":"/ To modify the priority use `push`, `change_priority` or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12180,"byte_end":12239,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ `change_priority_by`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12244,"byte_end":12269,"line_start":235,"line_end":235,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12274,"byte_end":12277,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12282,"byte_end":12311,"line_start":237,"line_end":237,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13108,"byte_end":13120,"line_start":259,"line_end":259,"column_start":12,"column_end":24},"name":"peek_max_mut","qualname":"<DoublePriorityQueue<I, P, H>>::peek_max_mut","value":"pub fn peek_max_mut(&mut Self) -> Option<(&mut I, &P)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the couple (item, priority) with the greatest\n priority in the queue, or None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the couple (item, priority) with the greatest","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12625,"byte_end":12682,"line_start":248,"line_end":248,"column_start":5,"column_end":62}},{"value":"/ priority in the queue, or None if it is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12687,"byte_end":12737,"line_start":249,"line_end":249,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12742,"byte_end":12745,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ The item is a mutable reference, but it's a logic error to modify it","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12750,"byte_end":12822,"line_start":251,"line_end":251,"column_start":5,"column_end":77}},{"value":"/ in a way that change the result of  `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12827,"byte_end":12882,"line_start":252,"line_end":252,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12887,"byte_end":12890,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The priority cannot be modified with a call to this function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12895,"byte_end":12960,"line_start":254,"line_end":254,"column_start":5,"column_end":70}},{"value":"/ To modify the priority use `push`, `change_priority` or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":12965,"byte_end":13024,"line_start":255,"line_end":255,"column_start":5,"column_end":64}},{"value":"/ `change_priority_by`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13029,"byte_end":13054,"line_start":256,"line_end":256,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13059,"byte_end":13062,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13067,"byte_end":13096,"line_start":258,"line_end":258,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13659,"byte_end":13667,"line_start":274,"line_end":274,"column_start":12,"column_end":20},"name":"capacity","qualname":"<DoublePriorityQueue<I, P, H>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the internal map can hold without\n reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the internal map can hold without","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13410,"byte_end":13478,"line_start":269,"line_end":269,"column_start":5,"column_end":73}},{"value":"/ reallocating.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13483,"byte_end":13500,"line_start":270,"line_end":270,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13505,"byte_end":13508,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the map might be able to hold more,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13513,"byte_end":13582,"line_start":272,"line_end":272,"column_start":5,"column_end":74}},{"value":"/ but is guaranteed to be able to hold at least this many.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13587,"byte_end":13647,"line_start":273,"line_end":273,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13852,"byte_end":13865,"line_start":280,"line_end":280,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<DoublePriorityQueue<I, P, H>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the internal data structures\n that support this operation as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the internal data structures","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13727,"byte_end":13783,"line_start":278,"line_end":278,"column_start":5,"column_end":61}},{"value":"/ that support this operation as much as possible.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13788,"byte_end":13840,"line_start":279,"line_end":279,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14093,"byte_end":14100,"line_start":287,"line_end":287,"column_start":12,"column_end":19},"name":"pop_min","qualname":"<DoublePriorityQueue<I, P, H>>::pop_min","value":"pub fn pop_min(&mut Self) -> Option<(I, P)>","parent":null,"children":[],"decl_id":null,"docs":" Removes the item with the lowest priority from\n the priority queue and returns the pair (item, priority),\n or None if the queue is empty.\n","sig":null,"attributes":[{"value":"/ Removes the item with the lowest priority from","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13926,"byte_end":13976,"line_start":284,"line_end":284,"column_start":5,"column_end":55}},{"value":"/ the priority queue and returns the pair (item, priority),","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":13981,"byte_end":14042,"line_start":285,"line_end":285,"column_start":5,"column_end":66}},{"value":"/ or None if the queue is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14047,"byte_end":14081,"line_start":286,"line_end":286,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14452,"byte_end":14459,"line_start":298,"line_end":298,"column_start":12,"column_end":19},"name":"pop_max","qualname":"<DoublePriorityQueue<I, P, H>>::pop_max","value":"pub fn pop_max(&mut Self) -> Option<(I, P)>","parent":null,"children":[],"decl_id":null,"docs":" Removes the item with the greatest priority from\n the priority queue and returns the pair (item, priority),\n or None if the queue is empty.\n","sig":null,"attributes":[{"value":"/ Removes the item with the greatest priority from","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14283,"byte_end":14335,"line_start":295,"line_end":295,"column_start":5,"column_end":57}},{"value":"/ the priority queue and returns the pair (item, priority),","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14340,"byte_end":14401,"line_start":296,"line_end":296,"column_start":5,"column_end":66}},{"value":"/ or None if the queue is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14406,"byte_end":14440,"line_start":297,"line_end":297,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14849,"byte_end":14874,"line_start":311,"line_end":311,"column_start":12,"column_end":37},"name":"into_ascending_sorted_vec","qualname":"<DoublePriorityQueue<I, P, H>>::into_ascending_sorted_vec","value":"pub fn into_ascending_sorted_vec(Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Implements a HeapSort.","sig":null,"attributes":[{"value":"/ Implements a HeapSort.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14642,"byte_end":14668,"line_start":306,"line_end":306,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14673,"byte_end":14676,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Consumes the PriorityQueue and returns a vector","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14681,"byte_end":14732,"line_start":308,"line_end":308,"column_start":5,"column_end":56}},{"value":"/ with all the items sorted from the one associated to","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14737,"byte_end":14793,"line_start":309,"line_end":309,"column_start":5,"column_end":61}},{"value":"/ the lowest priority to the highest.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":14798,"byte_end":14837,"line_start":310,"line_end":310,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15270,"byte_end":15296,"line_start":324,"line_end":324,"column_start":12,"column_end":38},"name":"into_descending_sorted_vec","qualname":"<DoublePriorityQueue<I, P, H>>::into_descending_sorted_vec","value":"pub fn into_descending_sorted_vec(Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Implements a HeapSort","sig":null,"attributes":[{"value":"/ Implements a HeapSort","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15064,"byte_end":15089,"line_start":319,"line_end":319,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15094,"byte_end":15097,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Consumes the PriorityQueue and returns a vector","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15102,"byte_end":15153,"line_start":321,"line_end":321,"column_start":5,"column_end":56}},{"value":"/ with all the items sorted from the one associated to","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15158,"byte_end":15214,"line_start":322,"line_end":322,"column_start":5,"column_end":61}},{"value":"/ the highest priority to the lowest.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15219,"byte_end":15258,"line_start":323,"line_end":323,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15555,"byte_end":15558,"line_start":333,"line_end":333,"column_start":12,"column_end":15},"name":"len","qualname":"<DoublePriorityQueue<I, P, H>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the priority queue.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the priority queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15486,"byte_end":15543,"line_start":332,"line_end":332,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15685,"byte_end":15693,"line_start":338,"line_end":338,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<DoublePriorityQueue<I, P, H>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the priority queue contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns true if the priority queue contains no elements.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15613,"byte_end":15673,"line_start":337,"line_end":337,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15920,"byte_end":15936,"line_start":345,"line_end":345,"column_start":12,"column_end":28},"name":"into_sorted_iter","qualname":"<DoublePriorityQueue<I, P, H>>::into_sorted_iter","value":"pub fn into_sorted_iter(Self) -> IntoSortedIter<I, P, H>","parent":null,"children":[],"decl_id":null,"docs":" Generates a new double ended iterator from self that\n will extract the elements from the one with the lowest priority\n to the highest one.\n","sig":null,"attributes":[{"value":"/ Generates a new double ended iterator from self that","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15752,"byte_end":15808,"line_start":342,"line_end":342,"column_start":5,"column_end":61}},{"value":"/ will extract the elements from the one with the lowest priority","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15813,"byte_end":15880,"line_start":343,"line_end":343,"column_start":5,"column_end":72}},{"value":"/ to the highest one.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":15885,"byte_end":15908,"line_start":344,"line_end":344,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16645,"byte_end":16652,"line_start":367,"line_end":367,"column_start":12,"column_end":19},"name":"reserve","qualname":"<DoublePriorityQueue<I, P, H>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the given `DoublePriorityQueue`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16189,"byte_end":16265,"line_start":358,"line_end":358,"column_start":5,"column_end":81}},{"value":"/ in the given `DoublePriorityQueue`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16270,"byte_end":16356,"line_start":359,"line_end":359,"column_start":5,"column_end":91}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16361,"byte_end":16430,"line_start":360,"line_end":360,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16435,"byte_end":16506,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16511,"byte_end":16546,"line_start":362,"line_end":362,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16551,"byte_end":16554,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16559,"byte_end":16571,"line_start":364,"line_end":364,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16576,"byte_end":16579,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16584,"byte_end":16633,"line_start":366,"line_end":366,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":17033,"byte_end":17037,"line_start":378,"line_end":378,"column_start":12,"column_end":16},"name":"push","qualname":"<DoublePriorityQueue<I, P, H>>::push","value":"pub fn push(&mut Self, I, P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Insert the item-priority pair into the queue.","sig":null,"attributes":[{"value":"/ Insert the item-priority pair into the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16736,"byte_end":16785,"line_start":371,"line_end":371,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16790,"byte_end":16793,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If an element equal to `item` was already into the queue,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16798,"byte_end":16859,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/ it is updated and the old value of its priority is returned in `Some`;","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16864,"byte_end":16938,"line_start":374,"line_end":374,"column_start":5,"column_end":79}},{"value":"/ otherwise, returns `None`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16943,"byte_end":16973,"line_start":375,"line_end":375,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16978,"byte_end":16981,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16986,"byte_end":17021,"line_start":377,"line_end":377,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18653,"byte_end":18666,"line_start":422,"line_end":422,"column_start":12,"column_end":25},"name":"push_increase","qualname":"<DoublePriorityQueue<I, P, H>>::push_increase","value":"pub fn push_increase(&mut Self, I, P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Increase the priority of an existing item in the queue, or\n insert it if not present.","sig":null,"attributes":[{"value":"/ Increase the priority of an existing item in the queue, or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":17929,"byte_end":17991,"line_start":408,"line_end":408,"column_start":5,"column_end":67}},{"value":"/ insert it if not present.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":17996,"byte_end":18025,"line_start":409,"line_end":409,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18030,"byte_end":18033,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If an element equal to `item` is already in the queue with a","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18038,"byte_end":18102,"line_start":411,"line_end":411,"column_start":5,"column_end":69}},{"value":"/ lower priority, its priority is increased to the new one","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18107,"byte_end":18167,"line_start":412,"line_end":412,"column_start":5,"column_end":65}},{"value":"/ without replacing the element and the old priority is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18172,"byte_end":18239,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/ Otherwise, the new element is inserted into the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18244,"byte_end":18302,"line_start":414,"line_end":414,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18307,"byte_end":18310,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if an element equal to `item` is already in the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18315,"byte_end":18381,"line_start":416,"line_end":416,"column_start":5,"column_end":71}},{"value":"/ queue. If its priority is higher then `priority`, the latter is returned back,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18386,"byte_end":18468,"line_start":417,"line_end":417,"column_start":5,"column_end":87}},{"value":"/ otherwise, the old priority is contained in the Option.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18473,"byte_end":18532,"line_start":418,"line_end":418,"column_start":5,"column_end":64}},{"value":"/ If the item is not in the queue, `None` is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18537,"byte_end":18593,"line_start":419,"line_end":419,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18598,"byte_end":18601,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18606,"byte_end":18641,"line_start":421,"line_end":421,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19612,"byte_end":19625,"line_start":444,"line_end":444,"column_start":12,"column_end":25},"name":"push_decrease","qualname":"<DoublePriorityQueue<I, P, H>>::push_decrease","value":"pub fn push_decrease(&mut Self, I, P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Decrease the priority of an existing item in the queue, or\n insert it if not present.","sig":null,"attributes":[{"value":"/ Decrease the priority of an existing item in the queue, or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18888,"byte_end":18950,"line_start":430,"line_end":430,"column_start":5,"column_end":67}},{"value":"/ insert it if not present.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18955,"byte_end":18984,"line_start":431,"line_end":431,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18989,"byte_end":18992,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ If an element equal to `item` is already in the queue with a","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":18997,"byte_end":19061,"line_start":433,"line_end":433,"column_start":5,"column_end":69}},{"value":"/ higher priority, its priority is decreased to the new one","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19066,"byte_end":19127,"line_start":434,"line_end":434,"column_start":5,"column_end":66}},{"value":"/ without replacing the element and the old priority is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19132,"byte_end":19199,"line_start":435,"line_end":435,"column_start":5,"column_end":72}},{"value":"/ Otherwise, the new element is inserted into the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19204,"byte_end":19262,"line_start":436,"line_end":436,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19267,"byte_end":19270,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if an element equal to `item` is already in the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19275,"byte_end":19341,"line_start":438,"line_end":438,"column_start":5,"column_end":71}},{"value":"/ queue. If its priority is lower then `priority`, the latter is returned back,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19346,"byte_end":19427,"line_start":439,"line_end":439,"column_start":5,"column_end":86}},{"value":"/ otherwise, the old priority is contained in the Option.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19432,"byte_end":19491,"line_start":440,"line_end":440,"column_start":5,"column_end":64}},{"value":"/ If the item is not in the queue, `None` is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19496,"byte_end":19552,"line_start":441,"line_end":441,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19557,"byte_end":19560,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19565,"byte_end":19600,"line_start":443,"line_end":443,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20248,"byte_end":20263,"line_start":460,"line_end":460,"column_start":12,"column_end":27},"name":"change_priority","qualname":"<DoublePriorityQueue<I, P, H>>::change_priority","value":"pub fn change_priority<Q: ?Sized>(&mut Self, &Q, P) -> Option<P> where\nI: Borrow<Q>, Q: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Change the priority of an Item returning the old value of priority,\n or `None` if the item wasn't in the queue.","sig":null,"attributes":[{"value":"/ Change the priority of an Item returning the old value of priority,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19847,"byte_end":19918,"line_start":452,"line_end":452,"column_start":5,"column_end":76}},{"value":"/ or `None` if the item wasn't in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19923,"byte_end":19969,"line_start":453,"line_end":453,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19974,"byte_end":19977,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ The argument `item` is only used for lookup, and is not used to overwrite the item's data","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":19982,"byte_end":20075,"line_start":455,"line_end":455,"column_start":5,"column_end":98}},{"value":"/ in the priority queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20080,"byte_end":20106,"line_start":456,"line_end":456,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20111,"byte_end":20114,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ The item is found in **O(1)** thanks to the hash table.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20119,"byte_end":20178,"line_start":458,"line_end":458,"column_start":5,"column_end":64}},{"value":"/ The operation is performed in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20183,"byte_end":20236,"line_start":459,"line_end":459,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20786,"byte_end":20804,"line_start":476,"line_end":476,"column_start":12,"column_end":30},"name":"change_priority_by","qualname":"<DoublePriorityQueue<I, P, H>>::change_priority_by","value":"pub fn change_priority_by<Q: ?Sized, F>(&mut Self, &Q, F) where I: Borrow<Q>,\nQ: Eq + Hash, F: FnOnce(&mut P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the priority of an Item using the provided function.\n The item is found in **O(1)** thanks to the hash table.\n The operation is performed in **O(log(N))** time (worst case).\n","sig":null,"attributes":[{"value":"/ Change the priority of an Item using the provided function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20576,"byte_end":20639,"line_start":473,"line_end":473,"column_start":5,"column_end":68}},{"value":"/ The item is found in **O(1)** thanks to the hash table.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20644,"byte_end":20703,"line_start":474,"line_end":474,"column_start":5,"column_end":64}},{"value":"/ The operation is performed in **O(log(N))** time (worst case).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":20708,"byte_end":20774,"line_start":475,"line_end":475,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21171,"byte_end":21183,"line_start":488,"line_end":488,"column_start":12,"column_end":24},"name":"get_priority","qualname":"<DoublePriorityQueue<I, P, H>>::get_priority","value":"pub fn get_priority<Q: ?Sized>(&Self, &Q) -> Option<&P> where I: Borrow<Q>,\nQ: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Get the priority of an item, or `None`, if the item is not in the queue\n","sig":null,"attributes":[{"value":"/ Get the priority of an item, or `None`, if the item is not in the queue","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21084,"byte_end":21159,"line_start":487,"line_end":487,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21471,"byte_end":21474,"line_start":498,"line_end":498,"column_start":12,"column_end":15},"name":"get","qualname":"<DoublePriorityQueue<I, P, H>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<(&I, &P)> where I: Borrow<Q>,\nQ: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Get the couple (item, priority) of an arbitrary element, as reference\n or `None` if the item is not in the queue.\n","sig":null,"attributes":[{"value":"/ Get the couple (item, priority) of an arbitrary element, as reference","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21335,"byte_end":21408,"line_start":496,"line_end":496,"column_start":5,"column_end":78}},{"value":"/ or `None` if the item is not in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21413,"byte_end":21459,"line_start":497,"line_end":497,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22064,"byte_end":22071,"line_start":515,"line_end":515,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DoublePriorityQueue<I, P, H>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&mut I, &P)> where\nI: Borrow<Q>, Q: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Get the couple (item, priority) of an arbitrary element, or `None`\n if the item was not in the queue.","sig":null,"attributes":[{"value":"/ Get the couple (item, priority) of an arbitrary element, or `None`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21623,"byte_end":21693,"line_start":506,"line_end":506,"column_start":5,"column_end":75}},{"value":"/ if the item was not in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21698,"byte_end":21735,"line_start":507,"line_end":507,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21740,"byte_end":21743,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ The item is a mutable reference, but it's a logic error to modify it","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21748,"byte_end":21820,"line_start":509,"line_end":509,"column_start":5,"column_end":77}},{"value":"/ in a way that change the result of  `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21825,"byte_end":21880,"line_start":510,"line_end":510,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21885,"byte_end":21888,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ The priority cannot be modified with a call to this function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21893,"byte_end":21958,"line_start":512,"line_end":512,"column_start":5,"column_end":70}},{"value":"/ To modify the priority use `push`, `change_priority` or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":21963,"byte_end":22022,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/ `change_priority_by`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22027,"byte_end":22052,"line_start":514,"line_end":514,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22478,"byte_end":22484,"line_start":528,"line_end":528,"column_start":12,"column_end":18},"name":"remove","qualname":"<DoublePriorityQueue<I, P, H>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<(I, P)> where I: Borrow<Q>,\nQ: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Remove an arbitrary element from the priority queue.\n Returns the (item, priority) couple or None if the item\n is not found in the queue.","sig":null,"attributes":[{"value":"/ Remove an arbitrary element from the priority queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22232,"byte_end":22288,"line_start":523,"line_end":523,"column_start":5,"column_end":61}},{"value":"/ Returns the (item, priority) couple or None if the item","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22293,"byte_end":22352,"line_start":524,"line_end":524,"column_start":5,"column_end":64}},{"value":"/ is not found in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22357,"byte_end":22387,"line_start":525,"line_end":525,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22392,"byte_end":22395,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ The operation is performed in **O(log(N))** time (worst case).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22400,"byte_end":22466,"line_start":527,"line_end":527,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22845,"byte_end":22853,"line_start":543,"line_end":543,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<DoublePriorityQueue<I, P, H>>::into_vec","value":"pub fn into_vec(Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Returns the items not ordered\n","sig":null,"attributes":[{"value":"/ Returns the items not ordered","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22800,"byte_end":22833,"line_start":542,"line_end":542,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22968,"byte_end":22973,"line_start":548,"line_end":548,"column_start":12,"column_end":17},"name":"clear","qualname":"<DoublePriorityQueue<I, P, H>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the priority queue\n","sig":null,"attributes":[{"value":"/ Drops all items from the priority queue","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":22913,"byte_end":22956,"line_start":547,"line_end":547,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23370,"byte_end":23376,"line_start":559,"line_end":559,"column_start":12,"column_end":18},"name":"append","qualname":"<DoublePriorityQueue<I, P, H>>::append","value":"pub fn append(&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Move all items of the `other` queue to `self`\n ignoring the items Eq to elements already in `self`\n At the end, `other` will be empty.","sig":null,"attributes":[{"value":"/ Move all items of the `other` queue to `self`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23026,"byte_end":23075,"line_start":552,"line_end":552,"column_start":5,"column_end":54}},{"value":"/ ignoring the items Eq to elements already in `self`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23080,"byte_end":23135,"line_start":553,"line_end":553,"column_start":5,"column_end":60}},{"value":"/ At the end, `other` will be empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23140,"byte_end":23178,"line_start":554,"line_end":554,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23183,"byte_end":23186,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ **Note** that at the end, the priority of the duplicated elements","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23191,"byte_end":23260,"line_start":556,"line_end":556,"column_start":5,"column_end":74}},{"value":"/ inside self may be the one of the elements in other,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23265,"byte_end":23321,"line_start":557,"line_end":557,"column_start":5,"column_end":61}},{"value":"/ if other is longer than self","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23326,"byte_end":23358,"line_start":558,"line_end":558,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"priority_queue","qualname":"::priority_queue","value":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":751},{"krate":0,"index":756},{"krate":0,"index":761},{"krate":0,"index":429},{"krate":0,"index":433},{"krate":0,"index":438},{"krate":0,"index":443},{"krate":0,"index":449},{"krate":0,"index":456},{"krate":0,"index":471},{"krate":0,"index":499},{"krate":0,"index":503},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":524},{"krate":0,"index":530},{"krate":0,"index":537},{"krate":0,"index":545},{"krate":0,"index":553},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":576}],"decl_id":null,"docs":" This module contains the [`PriorityQueue`] type and the related iterators.","sig":null,"attributes":[{"value":"/ This module contains the [`PriorityQueue`] type and the related iterators.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":42901,"byte_end":42979,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":42980,"byte_end":42983,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See the type level documentation for more details and examples.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":42984,"byte_end":43051,"line_start":23,"line_end":23,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iterators","qualname":"::priority_queue::iterators","value":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":349},{"krate":0,"index":355},{"krate":0,"index":365},{"krate":0,"index":371},{"krate":0,"index":376}],"decl_id":null,"docs":" This module defines iterator types that are used only with the [`PriorityQueue`].","sig":null,"attributes":[{"value":"/ This module defines iterator types that are used only with the [`PriorityQueue`].","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":67494,"byte_end":67579,"line_start":20,"line_end":20,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":67580,"byte_end":67583,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Usually you don't need to explicitly `use` any of the types declared here.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":67584,"byte_end":67662,"line_start":22,"line_end":22,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68543,"byte_end":68550,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::priority_queue::iterators::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348}],"decl_id":null,"docs":" A mutable iterator over the couples `(item, priority)` of the `PriorityQueue`\n in arbitrary order.","sig":null,"attributes":[{"value":"/ A mutable iterator over the couples `(item, priority)` of the `PriorityQueue`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68036,"byte_end":68117,"line_start":44,"line_end":44,"column_start":1,"column_end":82}},{"value":"/ in arbitrary order.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68118,"byte_end":68141,"line_start":45,"line_end":45,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68142,"byte_end":68145,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ It can be obtained calling the `iter_mut` method.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68146,"byte_end":68199,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68200,"byte_end":68203,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ It can be used to update the priorities of the elements in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68204,"byte_end":68277,"line_start":49,"line_end":49,"column_start":1,"column_end":74}},{"value":"/ When the iterator goes out of scope, the heap is rebuilt to restore the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68278,"byte_end":68353,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ structural properties.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68354,"byte_end":68380,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68381,"byte_end":68384,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The item is mutable too, but it is a logical error to modify it in a way that","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68385,"byte_end":68466,"line_start":53,"line_end":53,"column_start":1,"column_end":82}},{"value":"/ changes the result of any of `hash` or `eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68467,"byte_end":68515,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68516,"byte_end":68531,"line_start":55,"line_end":55,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69959,"byte_end":69973,"line_start":119,"line_end":119,"column_start":12,"column_end":26},"name":"IntoSortedIter","qualname":"::priority_queue::iterators::IntoSortedIter","value":"IntoSortedIter {  }","parent":null,"children":[{"krate":0,"index":375}],"decl_id":null,"docs":" A consuming iterator over the couples `(item, priority)` of the `PriorityQueue`\n ordered by priority, from the highest to the lowest.","sig":null,"attributes":[{"value":"/ A consuming iterator over the couples `(item, priority)` of the `PriorityQueue`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69725,"byte_end":69808,"line_start":114,"line_end":114,"column_start":1,"column_end":84}},{"value":"/ ordered by priority, from the highest to the lowest.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69809,"byte_end":69865,"line_start":115,"line_end":115,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69866,"byte_end":69869,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ It can be obtained calling the `into_sorted_iter` method.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69870,"byte_end":69931,"line_start":117,"line_end":117,"column_start":1,"column_end":62}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69932,"byte_end":69947,"line_start":118,"line_end":118,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44322,"byte_end":44335,"line_start":74,"line_end":74,"column_start":12,"column_end":25},"name":"PriorityQueue","qualname":"::priority_queue::PriorityQueue","value":"PriorityQueue {  }","parent":null,"children":[{"krate":0,"index":755}],"decl_id":null,"docs":" A priority queue with efficient change function to change the priority of an\n element.","sig":null,"attributes":[{"value":"/ A priority queue with efficient change function to change the priority of an","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43437,"byte_end":43517,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ element.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43518,"byte_end":43530,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43531,"byte_end":43534,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The priority is of type P, that must implement `std::cmp::Ord`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43535,"byte_end":43602,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43603,"byte_end":43606,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The item is of type I, that must implement `Hash` and `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43607,"byte_end":43670,"line_start":47,"line_end":47,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43671,"byte_end":43674,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Implemented as a heap of indexes, stores the items inside an `IndexMap`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43675,"byte_end":43750,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ to be able to retrieve them quickly.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43751,"byte_end":43791,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43792,"byte_end":43795,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43796,"byte_end":43809,"line_start":52,"line_end":52,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43810,"byte_end":43821,"line_start":53,"line_end":53,"column_start":1,"column_end":12}},{"value":"/ use priority_queue::PriorityQueue;","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43822,"byte_end":43860,"line_start":54,"line_end":54,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43861,"byte_end":43864,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ let mut pq = PriorityQueue::new();","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43865,"byte_end":43903,"line_start":56,"line_end":56,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43904,"byte_end":43907,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert!(pq.is_empty());","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43908,"byte_end":43935,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"/ pq.push(\"Apples\", 5);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43936,"byte_end":43961,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"/ pq.push(\"Bananas\", 8);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43962,"byte_end":43988,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/ pq.push(\"Strawberries\", 23);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43989,"byte_end":44021,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44022,"byte_end":44025,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pq.peek(), Some((&\"Strawberries\", &23)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44026,"byte_end":44082,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44083,"byte_end":44086,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ pq.change_priority(\"Bananas\", 25);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44087,"byte_end":44125,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(pq.peek(), Some((&\"Bananas\", &25)));","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44126,"byte_end":44177,"line_start":66,"line_end":66,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44178,"byte_end":44181,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ for (item, _) in pq.into_sorted_iter() {","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44182,"byte_end":44226,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/     println!(\"{}\", item);","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44227,"byte_end":44256,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44257,"byte_end":44262,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44263,"byte_end":44270,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44295,"byte_end":44310,"line_start":73,"line_end":73,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45108,"byte_end":45111,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<PriorityQueue<I, P>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `PriorityQueue`\n","sig":null,"attributes":[{"value":"/ Creates an empty `PriorityQueue`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45060,"byte_end":45096,"line_start":118,"line_end":118,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45243,"byte_end":45256,"line_start":124,"line_end":124,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<PriorityQueue<I, P>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `PriorityQueue` with the specified capacity.\n","sig":null,"attributes":[{"value":"/ Creates an empty `PriorityQueue` with the specified capacity.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45166,"byte_end":45231,"line_start":123,"line_end":123,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45531,"byte_end":45550,"line_start":136,"line_end":136,"column_start":12,"column_end":31},"name":"with_default_hasher","qualname":"<PriorityQueue<I, P, H>>::with_default_hasher","value":"pub fn with_default_hasher() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `PriorityQueue` with the default hasher\n","sig":null,"attributes":[{"value":"/ Creates an empty `PriorityQueue` with the default hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45459,"byte_end":45519,"line_start":135,"line_end":135,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45719,"byte_end":45751,"line_start":141,"line_end":141,"column_start":12,"column_end":44},"name":"with_capacity_and_default_hasher","qualname":"<PriorityQueue<I, P, H>>::with_capacity_and_default_hasher","value":"pub fn with_capacity_and_default_hasher(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `PriorityQueue` with the specified capacity and default hasher\n","sig":null,"attributes":[{"value":"/ Creates an empty `PriorityQueue` with the specified capacity and default hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45624,"byte_end":45707,"line_start":140,"line_end":140,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46024,"byte_end":46035,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<PriorityQueue<I, P, H>>::with_hasher","value":"pub fn with_hasher(H) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `PriorityQueue` with the specified hasher\n","sig":null,"attributes":[{"value":"/ Creates an empty `PriorityQueue` with the specified hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45950,"byte_end":46012,"line_start":152,"line_end":152,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46395,"byte_end":46419,"line_start":162,"line_end":162,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<PriorityQueue<I, P, H>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, H) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `PriorityQueue` with the specified capacity and hasher","sig":null,"attributes":[{"value":"/ Creates an empty `PriorityQueue` with the specified capacity and hasher","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46130,"byte_end":46205,"line_start":157,"line_end":157,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46210,"byte_end":46213,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The internal collections will be able to hold at least `capacity`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46218,"byte_end":46287,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/ elements without reallocating.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46292,"byte_end":46326,"line_start":160,"line_end":160,"column_start":5,"column_end":39}},{"value":"/ If `capacity` is 0, there will be no allocation.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46331,"byte_end":46383,"line_start":161,"line_end":161,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46686,"byte_end":46690,"line_start":170,"line_end":170,"column_start":12,"column_end":16},"name":"iter","qualname":"<PriorityQueue<I, P, H>>::iter","value":"pub fn iter(&Self) -> Iter<, I, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator in arbitrary order over the\n (item, priority) elements in the queue\n","sig":null,"attributes":[{"value":"/ Returns an iterator in arbitrary order over the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46576,"byte_end":46627,"line_start":168,"line_end":168,"column_start":5,"column_end":56}},{"value":"/ (item, priority) elements in the queue","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46632,"byte_end":46674,"line_start":169,"line_end":169,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47420,"byte_end":47428,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<PriorityQueue<I, P, H>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, I, P, H>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator in arbitrary order over the\n (item, priority) elements in the queue.","sig":null,"attributes":[{"value":"/ Returns an iterator in arbitrary order over the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46828,"byte_end":46879,"line_start":180,"line_end":180,"column_start":5,"column_end":56}},{"value":"/ (item, priority) elements in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46884,"byte_end":46927,"line_start":181,"line_end":181,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46932,"byte_end":46935,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ The item and the priority are mutable references, but it's a logic error","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46940,"byte_end":47016,"line_start":183,"line_end":183,"column_start":5,"column_end":81}},{"value":"/ to modify the item in a way that change the result of `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47021,"byte_end":47094,"line_start":184,"line_end":184,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47099,"byte_end":47102,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ It's *not* an error, instead, to modify the priorities, because the heap","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47107,"byte_end":47183,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ will be rebuilt once the `IterMut` goes out of scope. It would be","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47188,"byte_end":47257,"line_start":187,"line_end":187,"column_start":5,"column_end":74}},{"value":"/ rebuilt even if no priority value would have been modified, but the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47262,"byte_end":47333,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/ procedure will not move anything, but just compare the priorities.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47338,"byte_end":47408,"line_start":189,"line_end":189,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47666,"byte_end":47670,"line_start":198,"line_end":198,"column_start":12,"column_end":16},"name":"peek","qualname":"<PriorityQueue<I, P, H>>::peek","value":"pub fn peek(&Self) -> Option<(&I, &P)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the couple (item, priority) with the greatest\n priority in the queue, or None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the couple (item, priority) with the greatest","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47500,"byte_end":47557,"line_start":194,"line_end":194,"column_start":5,"column_end":62}},{"value":"/ priority in the queue, or None if it is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47562,"byte_end":47612,"line_start":195,"line_end":195,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47617,"byte_end":47620,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47625,"byte_end":47654,"line_start":197,"line_end":197,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48368,"byte_end":48376,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<PriorityQueue<I, P, H>>::peek_mut","value":"pub fn peek_mut(&mut Self) -> Option<(&mut I, &P)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the couple (item, priority) with the greatest\n priority in the queue, or None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the couple (item, priority) with the greatest","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47885,"byte_end":47942,"line_start":207,"line_end":207,"column_start":5,"column_end":62}},{"value":"/ priority in the queue, or None if it is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":47947,"byte_end":47997,"line_start":208,"line_end":208,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48002,"byte_end":48005,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ The item is a mutable reference, but it's a logic error to modify it","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48010,"byte_end":48082,"line_start":210,"line_end":210,"column_start":5,"column_end":77}},{"value":"/ in a way that change the result of  `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48087,"byte_end":48142,"line_start":211,"line_end":211,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48147,"byte_end":48150,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The priority cannot be modified with a call to this function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48155,"byte_end":48220,"line_start":213,"line_end":213,"column_start":5,"column_end":70}},{"value":"/ To modify the priority use `push`, `change_priority` or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48225,"byte_end":48284,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ `change_priority_by`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48289,"byte_end":48314,"line_start":215,"line_end":215,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48319,"byte_end":48322,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48327,"byte_end":48356,"line_start":217,"line_end":217,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48888,"byte_end":48896,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"capacity","qualname":"<PriorityQueue<I, P, H>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the internal map can hold without\n reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the internal map can hold without","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48639,"byte_end":48707,"line_start":228,"line_end":228,"column_start":5,"column_end":73}},{"value":"/ reallocating.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48712,"byte_end":48729,"line_start":229,"line_end":229,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48734,"byte_end":48737,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the map might be able to hold more,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48742,"byte_end":48811,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ but is guaranteed to be able to hold at least this many.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48816,"byte_end":48876,"line_start":232,"line_end":232,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49081,"byte_end":49094,"line_start":239,"line_end":239,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<PriorityQueue<I, P, H>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the internal data structures\n that support this operation as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the internal data structures","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":48956,"byte_end":49012,"line_start":237,"line_end":237,"column_start":5,"column_end":61}},{"value":"/ that support this operation as much as possible.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49017,"byte_end":49069,"line_start":238,"line_end":238,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49324,"byte_end":49327,"line_start":246,"line_end":246,"column_start":12,"column_end":15},"name":"pop","qualname":"<PriorityQueue<I, P, H>>::pop","value":"pub fn pop(&mut Self) -> Option<(I, P)>","parent":null,"children":[],"decl_id":null,"docs":" Removes the item with the greatest priority from\n the priority queue and returns the pair (item, priority),\n or None if the queue is empty.\n","sig":null,"attributes":[{"value":"/ Removes the item with the greatest priority from","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49155,"byte_end":49207,"line_start":243,"line_end":243,"column_start":5,"column_end":57}},{"value":"/ the priority queue and returns the pair (item, priority),","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49212,"byte_end":49273,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ or None if the queue is empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49278,"byte_end":49312,"line_start":245,"line_end":245,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49758,"byte_end":49773,"line_start":261,"line_end":261,"column_start":12,"column_end":27},"name":"into_sorted_vec","qualname":"<PriorityQueue<I, P, H>>::into_sorted_vec","value":"pub fn into_sorted_vec(Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Implements a HeapSort.","sig":null,"attributes":[{"value":"/ Implements a HeapSort.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49614,"byte_end":49640,"line_start":258,"line_end":258,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49645,"byte_end":49648,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Returns a `Vec<I>` sorted from the item associated to the highest priority to the lowest.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49653,"byte_end":49746,"line_start":260,"line_end":260,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50028,"byte_end":50031,"line_start":270,"line_end":270,"column_start":12,"column_end":15},"name":"len","qualname":"<PriorityQueue<I, P, H>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the priority queue.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the priority queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":49959,"byte_end":50016,"line_start":269,"line_end":269,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50158,"byte_end":50166,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<PriorityQueue<I, P, H>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the priority queue contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns true if the priority queue contains no elements.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50086,"byte_end":50146,"line_start":274,"line_end":274,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50380,"byte_end":50396,"line_start":282,"line_end":282,"column_start":12,"column_end":28},"name":"into_sorted_iter","qualname":"<PriorityQueue<I, P, H>>::into_sorted_iter","value":"pub fn into_sorted_iter(Self) -> IntoSortedIter<I, P, H>","parent":null,"children":[],"decl_id":null,"docs":" Generates a new iterator from self that\n will extract the elements from the one with the highest priority\n to the lowest one.\n","sig":null,"attributes":[{"value":"/ Generates a new iterator from self that","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50225,"byte_end":50268,"line_start":279,"line_end":279,"column_start":5,"column_end":48}},{"value":"/ will extract the elements from the one with the highest priority","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50273,"byte_end":50341,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/ to the lowest one.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50346,"byte_end":50368,"line_start":281,"line_end":281,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51093,"byte_end":51100,"line_start":304,"line_end":304,"column_start":12,"column_end":19},"name":"reserve","qualname":"<PriorityQueue<I, P, H>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the given `PriorityQueue`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50643,"byte_end":50719,"line_start":295,"line_end":295,"column_start":5,"column_end":81}},{"value":"/ in the given `PriorityQueue`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50724,"byte_end":50804,"line_start":296,"line_end":296,"column_start":5,"column_end":85}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50809,"byte_end":50878,"line_start":297,"line_end":297,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50883,"byte_end":50954,"line_start":298,"line_end":298,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50959,"byte_end":50994,"line_start":299,"line_end":299,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50999,"byte_end":51002,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51007,"byte_end":51019,"line_start":301,"line_end":301,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51024,"byte_end":51027,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51032,"byte_end":51081,"line_start":303,"line_end":303,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51478,"byte_end":51482,"line_start":315,"line_end":315,"column_start":12,"column_end":16},"name":"push","qualname":"<PriorityQueue<I, P, H>>::push","value":"pub fn push(&mut Self, I, P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Insert the item-priority pair into the queue.","sig":null,"attributes":[{"value":"/ Insert the item-priority pair into the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51184,"byte_end":51233,"line_start":308,"line_end":308,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51238,"byte_end":51241,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ If an element equal to `item` was already into the queue,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51246,"byte_end":51307,"line_start":310,"line_end":310,"column_start":5,"column_end":66}},{"value":"/ it is updated and the old value of its priority returned in `Some`;","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51312,"byte_end":51383,"line_start":311,"line_end":311,"column_start":5,"column_end":76}},{"value":"/ otherwise, returns `None`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51388,"byte_end":51418,"line_start":312,"line_end":312,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51423,"byte_end":51426,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":51431,"byte_end":51466,"line_start":314,"line_end":314,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53055,"byte_end":53068,"line_start":358,"line_end":358,"column_start":12,"column_end":25},"name":"push_increase","qualname":"<PriorityQueue<I, P, H>>::push_increase","value":"pub fn push_increase(&mut Self, I, P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Increase the priority of an existing item in the queue, or\n insert it if not present.","sig":null,"attributes":[{"value":"/ Increase the priority of an existing item in the queue, or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52331,"byte_end":52393,"line_start":344,"line_end":344,"column_start":5,"column_end":67}},{"value":"/ insert it if not present.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52398,"byte_end":52427,"line_start":345,"line_end":345,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52432,"byte_end":52435,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ If an element equal to `item` is already in the queue with a","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52440,"byte_end":52504,"line_start":347,"line_end":347,"column_start":5,"column_end":69}},{"value":"/ lower priority, its priority is increased to the new one","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52509,"byte_end":52569,"line_start":348,"line_end":348,"column_start":5,"column_end":65}},{"value":"/ without replacing the element and the old priority is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52574,"byte_end":52641,"line_start":349,"line_end":349,"column_start":5,"column_end":72}},{"value":"/ Otherwise, the new element is inserted into the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52646,"byte_end":52704,"line_start":350,"line_end":350,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52709,"byte_end":52712,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if an element equal to `item` is already in the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52717,"byte_end":52783,"line_start":352,"line_end":352,"column_start":5,"column_end":71}},{"value":"/ queue. If its priority is higher then `priority`, the latter is returned back,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52788,"byte_end":52870,"line_start":353,"line_end":353,"column_start":5,"column_end":87}},{"value":"/ otherwise, the old priority is contained in the Option.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52875,"byte_end":52934,"line_start":354,"line_end":354,"column_start":5,"column_end":64}},{"value":"/ If the item is not in the queue, `None` is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":52939,"byte_end":52995,"line_start":355,"line_end":355,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53000,"byte_end":53003,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53008,"byte_end":53043,"line_start":357,"line_end":357,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54014,"byte_end":54027,"line_start":380,"line_end":380,"column_start":12,"column_end":25},"name":"push_decrease","qualname":"<PriorityQueue<I, P, H>>::push_decrease","value":"pub fn push_decrease(&mut Self, I, P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Decrease the priority of an existing item in the queue, or\n insert it if not present.","sig":null,"attributes":[{"value":"/ Decrease the priority of an existing item in the queue, or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53290,"byte_end":53352,"line_start":366,"line_end":366,"column_start":5,"column_end":67}},{"value":"/ insert it if not present.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53357,"byte_end":53386,"line_start":367,"line_end":367,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53391,"byte_end":53394,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ If an element equal to `item` is already in the queue with a","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53399,"byte_end":53463,"line_start":369,"line_end":369,"column_start":5,"column_end":69}},{"value":"/ higher priority, its priority is decreased to the new one","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53468,"byte_end":53529,"line_start":370,"line_end":370,"column_start":5,"column_end":66}},{"value":"/ without replacing the element and the old priority is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53534,"byte_end":53601,"line_start":371,"line_end":371,"column_start":5,"column_end":72}},{"value":"/ Otherwise, the new element is inserted into the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53606,"byte_end":53664,"line_start":372,"line_end":372,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53669,"byte_end":53672,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if an element equal to `item` is already in the","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53677,"byte_end":53743,"line_start":374,"line_end":374,"column_start":5,"column_end":71}},{"value":"/ queue. If its priority is lower then `priority`, the latter is returned back,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53748,"byte_end":53829,"line_start":375,"line_end":375,"column_start":5,"column_end":86}},{"value":"/ otherwise, the old priority is contained in the Option.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53834,"byte_end":53893,"line_start":376,"line_end":376,"column_start":5,"column_end":64}},{"value":"/ If the item is not in the queue, `None` is returned.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53898,"byte_end":53954,"line_start":377,"line_end":377,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53959,"byte_end":53962,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":53967,"byte_end":54002,"line_start":379,"line_end":379,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54650,"byte_end":54665,"line_start":396,"line_end":396,"column_start":12,"column_end":27},"name":"change_priority","qualname":"<PriorityQueue<I, P, H>>::change_priority","value":"pub fn change_priority<Q: ?Sized>(&mut Self, &Q, P) -> Option<P> where\nI: Borrow<Q>, Q: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Change the priority of an Item returning the old value of priority,\n or `None` if the item wasn't in the queue.","sig":null,"attributes":[{"value":"/ Change the priority of an Item returning the old value of priority,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54249,"byte_end":54320,"line_start":388,"line_end":388,"column_start":5,"column_end":76}},{"value":"/ or `None` if the item wasn't in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54325,"byte_end":54371,"line_start":389,"line_end":389,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54376,"byte_end":54379,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ The argument `item` is only used for lookup, and is not used to overwrite the item's data","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54384,"byte_end":54477,"line_start":391,"line_end":391,"column_start":5,"column_end":98}},{"value":"/ in the priority queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54482,"byte_end":54508,"line_start":392,"line_end":392,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54513,"byte_end":54516,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The item is found in **O(1)** thanks to the hash table.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54521,"byte_end":54580,"line_start":394,"line_end":394,"column_start":5,"column_end":64}},{"value":"/ The operation is performed in **O(log(N))** time.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54585,"byte_end":54638,"line_start":395,"line_end":395,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55188,"byte_end":55206,"line_start":412,"line_end":412,"column_start":12,"column_end":30},"name":"change_priority_by","qualname":"<PriorityQueue<I, P, H>>::change_priority_by","value":"pub fn change_priority_by<Q: ?Sized, F>(&mut Self, &Q, F) where I: Borrow<Q>,\nQ: Eq + Hash, F: FnOnce(&mut P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the priority of an Item using the provided function.\n The item is found in **O(1)** thanks to the hash table.\n The operation is performed in **O(log(N))** time (worst case).\n","sig":null,"attributes":[{"value":"/ Change the priority of an Item using the provided function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":54978,"byte_end":55041,"line_start":409,"line_end":409,"column_start":5,"column_end":68}},{"value":"/ The item is found in **O(1)** thanks to the hash table.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55046,"byte_end":55105,"line_start":410,"line_end":410,"column_start":5,"column_end":64}},{"value":"/ The operation is performed in **O(log(N))** time (worst case).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55110,"byte_end":55176,"line_start":411,"line_end":411,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55573,"byte_end":55585,"line_start":424,"line_end":424,"column_start":12,"column_end":24},"name":"get_priority","qualname":"<PriorityQueue<I, P, H>>::get_priority","value":"pub fn get_priority<Q: ?Sized>(&Self, &Q) -> Option<&P> where I: Borrow<Q>,\nQ: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Get the priority of an item, or `None`, if the item is not in the queue\n","sig":null,"attributes":[{"value":"/ Get the priority of an item, or `None`, if the item is not in the queue","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55486,"byte_end":55561,"line_start":423,"line_end":423,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55873,"byte_end":55876,"line_start":434,"line_end":434,"column_start":12,"column_end":15},"name":"get","qualname":"<PriorityQueue<I, P, H>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<(&I, &P)> where I: Borrow<Q>,\nQ: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Get the couple (item, priority) of an arbitrary element, as reference\n or `None` if the item is not in the queue.\n","sig":null,"attributes":[{"value":"/ Get the couple (item, priority) of an arbitrary element, as reference","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55737,"byte_end":55810,"line_start":432,"line_end":432,"column_start":5,"column_end":78}},{"value":"/ or `None` if the item is not in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":55815,"byte_end":55861,"line_start":433,"line_end":433,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56466,"byte_end":56473,"line_start":451,"line_end":451,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<PriorityQueue<I, P, H>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&mut I, &P)> where\nI: Borrow<Q>, Q: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Get the couple (item, priority) of an arbitrary element, or `None`\n if the item was not in the queue.","sig":null,"attributes":[{"value":"/ Get the couple (item, priority) of an arbitrary element, or `None`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56025,"byte_end":56095,"line_start":442,"line_end":442,"column_start":5,"column_end":75}},{"value":"/ if the item was not in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56100,"byte_end":56137,"line_start":443,"line_end":443,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56142,"byte_end":56145,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ The item is a mutable reference, but it's a logic error to modify it","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56150,"byte_end":56222,"line_start":445,"line_end":445,"column_start":5,"column_end":77}},{"value":"/ in a way that change the result of  `Hash` or `Eq`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56227,"byte_end":56282,"line_start":446,"line_end":446,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56287,"byte_end":56290,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ The priority cannot be modified with a call to this function.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56295,"byte_end":56360,"line_start":448,"line_end":448,"column_start":5,"column_end":70}},{"value":"/ To modify the priority use `push`, `change_priority` or","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56365,"byte_end":56424,"line_start":449,"line_end":449,"column_start":5,"column_end":64}},{"value":"/ `change_priority_by`.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56429,"byte_end":56454,"line_start":450,"line_end":450,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56880,"byte_end":56886,"line_start":464,"line_end":464,"column_start":12,"column_end":18},"name":"remove","qualname":"<PriorityQueue<I, P, H>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<(I, P)> where I: Borrow<Q>,\nQ: Eq + Hash","parent":null,"children":[],"decl_id":null,"docs":" Remove an arbitrary element from the priority queue.\n Returns the (item, priority) couple or None if the item\n is not found in the queue.","sig":null,"attributes":[{"value":"/ Remove an arbitrary element from the priority queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56634,"byte_end":56690,"line_start":459,"line_end":459,"column_start":5,"column_end":61}},{"value":"/ Returns the (item, priority) couple or None if the item","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56695,"byte_end":56754,"line_start":460,"line_end":460,"column_start":5,"column_end":64}},{"value":"/ is not found in the queue.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56759,"byte_end":56789,"line_start":461,"line_end":461,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56794,"byte_end":56797,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The operation is performed in **O(log(N))** time (worst case).","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":56802,"byte_end":56868,"line_start":463,"line_end":463,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57247,"byte_end":57255,"line_start":479,"line_end":479,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<PriorityQueue<I, P, H>>::into_vec","value":"pub fn into_vec(Self) -> Vec<I>","parent":null,"children":[],"decl_id":null,"docs":" Returns the items not ordered\n","sig":null,"attributes":[{"value":"/ Returns the items not ordered","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57202,"byte_end":57235,"line_start":478,"line_end":478,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57370,"byte_end":57375,"line_start":484,"line_end":484,"column_start":12,"column_end":17},"name":"clear","qualname":"<PriorityQueue<I, P, H>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the priority queue\n","sig":null,"attributes":[{"value":"/ Drops all items from the priority queue","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57315,"byte_end":57358,"line_start":483,"line_end":483,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57772,"byte_end":57778,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"append","qualname":"<PriorityQueue<I, P, H>>::append","value":"pub fn append(&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Move all items of the `other` queue to `self`\n ignoring the items Eq to elements already in `self`\n At the end, `other` will be empty.","sig":null,"attributes":[{"value":"/ Move all items of the `other` queue to `self`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57428,"byte_end":57477,"line_start":488,"line_end":488,"column_start":5,"column_end":54}},{"value":"/ ignoring the items Eq to elements already in `self`","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57482,"byte_end":57537,"line_start":489,"line_end":489,"column_start":5,"column_end":60}},{"value":"/ At the end, `other` will be empty.","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57542,"byte_end":57580,"line_start":490,"line_end":490,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57585,"byte_end":57588,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ **Note** that at the end, the priority of the duplicated elements","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57593,"byte_end":57662,"line_start":492,"line_end":492,"column_start":5,"column_end":74}},{"value":"/ inside self may be the one of the elements in other,","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57667,"byte_end":57723,"line_start":493,"line_end":493,"column_start":5,"column_end":61}},{"value":"/ if other is longer than self","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57728,"byte_end":57760,"line_start":494,"line_end":494,"column_start":5,"column_end":37}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4497,"byte_end":4501,"line_start":51,"line_end":51,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":5001,"byte_end":5009,"line_start":74,"line_end":74,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40122,"byte_end":40129,"line_start":75,"line_end":75,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40346,"byte_end":40353,"line_start":85,"line_end":85,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40851,"byte_end":40858,"line_start":104,"line_end":104,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41739,"byte_end":41753,"line_start":140,"line_end":140,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41941,"byte_end":41955,"line_start":151,"line_end":151,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8205,"byte_end":8224,"line_start":102,"line_end":102,"column_start":22,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8321,"byte_end":8340,"line_start":110,"line_end":110,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8517,"byte_end":8536,"line_start":122,"line_end":122,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8901,"byte_end":8920,"line_start":138,"line_end":138,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9420,"byte_end":9439,"line_start":155,"line_end":155,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10336,"byte_end":10355,"line_start":184,"line_end":184,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16031,"byte_end":16050,"line_start":350,"line_end":350,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23503,"byte_end":23522,"line_start":565,"line_end":565,"column_start":15,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23587,"byte_end":23606,"line_start":572,"line_end":572,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":234},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":32273,"byte_end":32292,"line_start":831,"line_end":831,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":32619,"byte_end":32638,"line_start":847,"line_end":847,"column_start":48,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":33071,"byte_end":33090,"line_start":864,"line_end":864,"column_start":40,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":33436,"byte_end":33455,"line_start":881,"line_end":881,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":34248,"byte_end":34267,"line_start":919,"line_end":919,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":35040,"byte_end":35059,"line_start":950,"line_end":950,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":35338,"byte_end":35357,"line_start":962,"line_end":962,"column_start":71,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68879,"byte_end":68886,"line_start":75,"line_end":75,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69097,"byte_end":69104,"line_start":85,"line_end":85,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69602,"byte_end":69609,"line_start":104,"line_end":104,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":70248,"byte_end":70262,"line_start":136,"line_end":136,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44698,"byte_end":44711,"line_start":93,"line_end":93,"column_start":22,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44808,"byte_end":44821,"line_start":101,"line_end":101,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44998,"byte_end":45011,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45364,"byte_end":45377,"line_start":129,"line_end":129,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45865,"byte_end":45878,"line_start":146,"line_end":146,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46763,"byte_end":46776,"line_start":175,"line_end":175,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50491,"byte_end":50504,"line_start":287,"line_end":287,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57905,"byte_end":57918,"line_start":501,"line_end":501,"column_start":15,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57983,"byte_end":57996,"line_start":508,"line_end":508,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":61490,"byte_end":61503,"line_start":615,"line_end":615,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":61836,"byte_end":61849,"line_start":631,"line_end":631,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":62288,"byte_end":62301,"line_start":648,"line_end":648,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":62641,"byte_end":62654,"line_start":665,"line_end":665,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":63435,"byte_end":63448,"line_start":703,"line_end":703,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":64267,"byte_end":64280,"line_start":734,"line_end":734,"column_start":65,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":72677,"byte_end":72682,"line_start":67,"line_end":67,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":72779,"byte_end":72784,"line_start":75,"line_end":75,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":72961,"byte_end":72966,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":73303,"byte_end":73308,"line_start":103,"line_end":103,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":73780,"byte_end":73785,"line_start":120,"line_end":120,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":76261,"byte_end":76266,"line_start":192,"line_end":192,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":78750,"byte_end":78755,"line_start":272,"line_end":272,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":83851,"byte_end":83856,"line_start":436,"line_end":436,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":84479,"byte_end":84484,"line_start":468,"line_end":468,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":84780,"byte_end":84785,"line_start":483,"line_end":483,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":85349,"byte_end":85354,"line_start":505,"line_end":505,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":86412,"byte_end":86417,"line_start":540,"line_end":540,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":87066,"byte_end":87071,"line_start":563,"line_end":563,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2690,"byte_end":2704,"line_start":84,"line_end":84,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2714,"byte_end":2735,"line_start":85,"line_end":85,"column_start":9,"column_end":30},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":6135,"byte_end":6144,"line_start":24,"line_end":24,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\lib.rs","byte_start":2745,"byte_end":2759,"line_start":86,"line_end":86,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":323}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":43061,"byte_end":43070,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":324}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":4497,"byte_end":4501,"line_start":51,"line_end":51,"column_start":37,"column_end":41},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":7},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\core_iterators.rs","byte_start":5001,"byte_end":5009,"line_start":74,"line_end":74,"column_start":25,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40122,"byte_end":40129,"line_start":75,"line_end":75,"column_start":31,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40346,"byte_end":40353,"line_start":85,"line_end":85,"column_start":52,"column_end":59},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":40851,"byte_end":40858,"line_start":104,"line_end":104,"column_start":40,"column_end":47},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41739,"byte_end":41753,"line_start":140,"line_end":140,"column_start":28,"column_end":42},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\iterators.rs","byte_start":41941,"byte_end":41955,"line_start":151,"line_end":151,"column_start":39,"column_end":53},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":7471}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8205,"byte_end":8224,"line_start":102,"line_end":102,"column_start":22,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":2660}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8321,"byte_end":8340,"line_start":110,"line_end":110,"column_start":27,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8517,"byte_end":8536,"line_start":122,"line_end":122,"column_start":12,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":8901,"byte_end":8920,"line_start":138,"line_end":138,"column_start":15,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":9420,"byte_end":9439,"line_start":155,"line_end":155,"column_start":15,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":10336,"byte_end":10355,"line_start":184,"line_end":184,"column_start":15,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":16031,"byte_end":16050,"line_start":350,"line_end":350,"column_start":15,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23503,"byte_end":23522,"line_start":565,"line_end":565,"column_start":15,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":23587,"byte_end":23606,"line_start":572,"line_end":572,"column_start":15,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":32273,"byte_end":32292,"line_start":831,"line_end":831,"column_start":37,"column_end":56},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":2910}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":32619,"byte_end":32638,"line_start":847,"line_end":847,"column_start":48,"column_end":67},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":2910}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":33071,"byte_end":33090,"line_start":864,"line_end":864,"column_start":40,"column_end":59},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":7423}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":33436,"byte_end":33455,"line_start":881,"line_end":881,"column_start":32,"column_end":51},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":7427}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":34248,"byte_end":34267,"line_start":919,"line_end":919,"column_start":34,"column_end":53},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":7436}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":35040,"byte_end":35059,"line_start":950,"line_end":950,"column_start":30,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\double_priority_queue\\mod.rs","byte_start":35338,"byte_end":35357,"line_start":962,"line_end":962,"column_start":71,"column_end":90},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":2655}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":68879,"byte_end":68886,"line_start":75,"line_end":75,"column_start":31,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69097,"byte_end":69104,"line_start":85,"line_end":85,"column_start":52,"column_end":59},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":342},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":69602,"byte_end":69609,"line_start":104,"line_end":104,"column_start":40,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":342},"to":{"krate":2,"index":3239}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\iterators.rs","byte_start":70248,"byte_end":70262,"line_start":136,"line_end":136,"column_start":28,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":7607}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44698,"byte_end":44711,"line_start":93,"line_end":93,"column_start":22,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":2660}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44808,"byte_end":44821,"line_start":101,"line_end":101,"column_start":27,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":44998,"byte_end":45011,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45364,"byte_end":45377,"line_start":129,"line_end":129,"column_start":15,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":45865,"byte_end":45878,"line_start":146,"line_end":146,"column_start":15,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":46763,"byte_end":46776,"line_start":175,"line_end":175,"column_start":15,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":50491,"byte_end":50504,"line_start":287,"line_end":287,"column_start":15,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57905,"byte_end":57918,"line_start":501,"line_end":501,"column_start":15,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":57983,"byte_end":57996,"line_start":508,"line_end":508,"column_start":15,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":61490,"byte_end":61503,"line_start":615,"line_end":615,"column_start":37,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":2910}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":61836,"byte_end":61849,"line_start":631,"line_end":631,"column_start":54,"column_end":67},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":2910}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":62288,"byte_end":62301,"line_start":648,"line_end":648,"column_start":40,"column_end":53},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":7423}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":62641,"byte_end":62654,"line_start":665,"line_end":665,"column_start":32,"column_end":45},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":7427}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":63435,"byte_end":63448,"line_start":703,"line_end":703,"column_start":34,"column_end":47},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":7436}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\priority_queue\\mod.rs","byte_start":64267,"byte_end":64280,"line_start":734,"line_end":734,"column_start":65,"column_end":78},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":751},"to":{"krate":2,"index":2655}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":72677,"byte_end":72682,"line_start":67,"line_end":67,"column_start":22,"column_end":27},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":2660}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":72779,"byte_end":72784,"line_start":75,"line_end":75,"column_start":27,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":72961,"byte_end":72966,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":73303,"byte_end":73308,"line_start":103,"line_end":103,"column_start":15,"column_end":20},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":73780,"byte_end":73785,"line_start":120,"line_end":120,"column_start":15,"column_end":20},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":76261,"byte_end":76266,"line_start":192,"line_end":192,"column_start":15,"column_end":20},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":78750,"byte_end":78755,"line_start":272,"line_end":272,"column_start":15,"column_end":20},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":83851,"byte_end":83856,"line_start":436,"line_end":436,"column_start":32,"column_end":37},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":7427}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":84479,"byte_end":84484,"line_start":468,"line_end":468,"column_start":57,"column_end":62},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":2655}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":84780,"byte_end":84785,"line_start":483,"line_end":483,"column_start":37,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":2910}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":85349,"byte_end":85354,"line_start":505,"line_end":505,"column_start":40,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":7423}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":86412,"byte_end":86417,"line_start":540,"line_end":540,"column_start":34,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":7436}},{"span":{"file_name":"C:\\Users\\Kiss Martno\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\priority-queue-1.2.1\\src\\store.rs","byte_start":87066,"byte_end":87071,"line_start":563,"line_end":563,"column_start":30,"column_end":35},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":9350}}]}